
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Risk {
  id             Int      @id @default(autoincrement()) // Risk ID
  projectId      Int                                     // Project ID (FK)
  companyId      Int                                     // Company ID (FK)
  description    String                                  // Risk Description
  severityLevel  String                                  // Severity Level (High / Medium / Low)
  mitigationPlan String                                  // Mitigation Plan
  riskOwner      String                                  // Risk Owner
  status         String                                  // Status (Open / Resolved)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Project
  project   Project @relation(fields: [projectId], references: [id])
  company Company @relation(fields: [companyId], references: [id])
}

model Company {
  id            Int      @id @default(autoincrement())
  companyName   String
  plan          Plan     @default(BASIC)
  adminName     String
  adminEmail    String   @unique
  adminPassword String // store hashed password here
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  maxAdmins     Int      @default(2) // BASIC: 2, PRO: 5, PLATINUM: 7
  maxManagers   Int      @default(5) // BASIC: 5, PRO: 8, PLATINUM: 10
  maxUsers      Int      @default(15) // BASIC: 15, PRO: 20, PLATINUM: 25

  // Relations
  users     User[]
  projects  Project[]
  tasks     Task[]
  risks     Risk[]
  resources Resource[]

  @@index([plan])
}

enum Plan {
  BASIC
  PRO
  PLATINUM
}

model User {
  id          Int       @id @default(autoincrement())
  name        String
  email       String    @unique
  password    String
  role        String
  status      String    @default("ACTIVE")
  permissions Json?
  lastLogin   DateTime?

  companyId Int?
  company   Company? @relation(fields: [companyId], references: [id])

  tasks     Task[]   @relation("TaskAssignedUser")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id             Int           @id @default(autoincrement()) // Primary Key
  companyId      Int                                      // Company ID (FK)
  name           String
  clientName     String
  startDate      DateTime
  endDate        DateTime
  projectManager String
  budget         Float
  status         ProjectStatus
  priorityLevel  PriorityLevel
  notes          String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company    Company   @relation(fields: [companyId], references: [id])
  tasks      Task[]
  risks      Risk[]
  resources  Resource[]
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
  DELETED
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
}

model Resource {
  id              Int      @id @default(autoincrement())
  companyId       Int                                      // Company ID (FK)
  resourceType    String                                   // e.g., Developer, Designer, Equipment
  assignedProject String                                   // e.g., project-specific label/role
  projectId       Int                                      // FK to Project
  allocationStart DateTime                                 // When allocation starts
  allocationEnd   DateTime                                 // When allocation ends
  utilizationRate Float                                    // Utilization percentage (0â€“100)
  status          String @default("ACTIVE")                // Resource status

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  company Company @relation(fields: [companyId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Task {
  id             Int      @id @default(autoincrement())
  companyId      Int
  projectId      Int
  title          String

  // Fix: make assignedTo Int, not String
  assignedTo     Int?
  assignedUser   User? @relation("TaskAssignedUser", fields: [assignedTo], references: [id])

  priority       String
  status         String
  startDate      DateTime
  endDate        DateTime
  completionDate DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  company        Company @relation(fields: [companyId], references: [id])
  project        Project @relation(fields: [projectId], references: [id])
}

