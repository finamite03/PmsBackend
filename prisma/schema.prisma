
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Risk {
  id             Int      @id @default(autoincrement()) // Risk ID
  projectId      Int                                     // Project ID (FK)
  description    String                                  // Risk Description
  severityLevel  String                                  // Severity Level (High / Medium / Low)
  mitigationPlan String                                  // Mitigation Plan
  riskOwner      String                                  // Risk Owner
  status         String                                  // Status (Open / Resolved)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation to Project
  project   Project @relation(fields: [projectId], references: [id])
}

model Project {
  id             Int           @id @default(autoincrement()) // Primary Key
  name           String
  clientName     String
  startDate      DateTime
  endDate        DateTime
  projectManager String
  budget         Float
  status         ProjectStatus
  priorityLevel  PriorityLevel
  notes          String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  tasks      Task[]
  risks      Risk[]
  resources  Resource[]
}

enum ProjectStatus {
  PLANNED
  ACTIVE
  COMPLETED
  ON_HOLD
}

enum PriorityLevel {
  HIGH
  MEDIUM
  LOW
}

model Resource {
  id               Int      @id @default(autoincrement())
  resourceType     String                                // e.g., Developer, Designer, Equipment
  assignedProject  String                                // e.g., Developer, Designer, Equipment
  projectId        Int                                   // FK to Project
  allocationStart  DateTime                              // When allocation starts
  allocationEnd    DateTime                              // When allocation ends
  utilizationRate  Float                                 // Utilization percentage (0–100)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [id])
}

model Task {
  id              Int      @id @default(autoincrement())
  projectId       Int      // Foreign Key → Project.id
  title           String                           // Task title / name
  assignedTo      String                           // Assigned or delegated to
  priority        String                           // High / Medium / Low
  status          String                           // Pending / In Progress / Completed
  startDate       DateTime
  endDate         DateTime
  completionDate  DateTime?                        // Nullable in case not completed yet

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  project Project @relation(fields: [projectId], references: [id])
}

model User {
  id         Int      @id @default(autoincrement())
  name       String
  email      String   @unique
  role       String
  status     String
  password   String
  permissions String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  lastLogin  DateTime?
}
